
snippet v
	${1} := ${2}

snippet vr
	var ${1:t} ${0:string}

snippet var
	var ${1} ${2} = ${3}

snippet vars
	var (
		${1} ${2} = ${3}
	)

snippet ap
	append(${1:slice}, ${0:value})

snippet ch
	chan ${0:int}

snippet co
	const (
		${1:NAME1} = iota
		${0:NAME2}
	)

snippet im
	import (
		"${1:package}"
	)

snippet in
	interface{}

snippet inf
	interface ${1:name} {
		${2:/* methods */}
	}

snippet if
	if ${1:/* condition */} {
		${2}
	}

snippet el
	else {
		${1}
	}

snippet ir
	if err != nil {
		${0}
	}

snippet ie
	if ${1:/* condition */} {
		${2}
	} else {
		${3}
	}
	${0}

snippet fo
	for ${2:i} := 0; $2 < ${1:count}; $2${3:++} {
		${4}
	}
	${0}

snippet df
	defer ${0:func}()

snippet dfr
	defer func() {
		if err := recover(); err != nil {
			${0}
		}
	}()

snippet fr
	for ${1:k}, ${2:v} := range ${3} {
		${0}
	}

snippet fn
	func ${1:funcName}(${2}) ${3:error} {
		${0}
	}


snippet fm
	func (self ${1:type}) ${2:funcName}(${3}) ${4:error} {
		${0}
	}

snippet mk
	make(${1:[]string}, ${0:0})

snippet map
	map[${1:string}]${0:int}

snippet main
	func main() {
		${1}
	}
	${0}


snippet nw
	new(${0:type})

snippet pn
	panic("${0:msg}")

snippet logp
	log.Println("${1}")

snippet logf
	log.Printf("%${1:s}", ${2:var})

snippet pr
	fmt.Printf("%${1:s}\n", ${2:var})

snippet sp
	fmt.Sprintf("%${1:s}", ${2:var})

snippet sl
	select {
	case ${1:v1} := <-${2:chan1}
		${3}
	case ${4:v2} := <-${5:chan2}
		${6}
	default:
		${0}
	}


snippet tst
	type ${1:name} struct {
		${0}
	}

snippet sw
	switch ${1:var} {
	case ${2:value1}:
		${3}
	case ${4:value2}:
		${5}
	default:
		${0}
	}

snippet cs
	case ${1:value}:
		${0}

snippet gof
	go func(${1} ${2:type}) {
		${3:/* code */}
	}(${0})


#
# Testing
#

snippet Tfn
	func Test${1}(t *testing.T) {
		${0}
	}
